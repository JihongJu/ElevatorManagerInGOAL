init module{
	knowledge{
		
		% auction
		auction(Level, Dir) :- fButtonOn(Level,Dir), not(served(Level,Dir)).
		
		% agent X bids higher than agent Y
		higherThan(X, Y, Level, Dir) :- bid(X, Level, Dir, UtilX), bid(Y, Level, Dir, UtilY), X\=Y, UtilX>UtilY, agent(X), agent(Y).
		% exist a bid higher than bid (X, Level,Dir,UtilX))
		existHigherThan(X, Level,Dir,UtilX) :- bid(X, Level, Dir, UtilX), higherThan(_,X,Level,Dir).
		% there does not exist a bid higher than the highest bid
		highest_bid(X, Level,Dir,UtilX) :- bid(X, Level, Dir, UtilX), not(existHigherThan(X, Level, Dir, UtilX)).
		
		
		% exist a bid for the auction
		existABid(Level, Dir) :- auction(Level, Dir), bid(AnyAgt, Level, Dir, AnyUtil).
		
		% set agent priority for task assignment
		priorTo(X,Z) :- priorTo(X,Y), priorTo(Y,Z), agent(X), agent(Y), agent(Z).
		
		

		
		
	}
	beliefs{
		atFloor(1).
		dir(down).
		served(1,down).
		
		priorTo(elevator,elevator_0).
		priorTo(elevator_0,elevator_1).
	}
	goals{
				
	}
}

main module{
	program {

	}
}

event module {
	program {
		%%%%% Communicating Processing %%%%%
		
		% update beliefs from elevator agents' percepts
		%%%%%%%%%%%%%%%%%%%%%%%%%%%% not used by now
		% insert "Sender is at floor Lever" whenever received from Sender at floor Level and delete whenever
		% received from Sendor not at floor Level
		% agtAtFloor True if agent Agt is at floor Level.
%		forall bel( received(Sender, atFloor(Level)), not(agtAtFloor(Sender, Level)) ) 
%			do insert( agtAtFloor(Sender, Level) )
%			+ delete( received(Sender, atFloor(Level)) ).	% delete received messages 
					
%		forall bel( agtAtFloor(Sender, Level), received(Sender, not(atFloor(Level))) )
%			do delete( agtAtFloor(Sender, Level) )
%			+ delete( received(Sender, not(atFloor(Level))) ).	% delete received messages
		
		% insert or delete "Level Floor's Dir button is on" when received from elevator agents.
		forall bel( received(Sender, fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir)) )
			do insert( fButtonOn(Level,Dir) )
			+ delete( received(Sender, fButtonOn(Level,Dir)) ).	% delete received messages 
			
		forall bel(  received(Sender, not(fButtonOn(Level,Dir))), fButtonOn(Level,Dir) )
			do delete( fButtonOn(Level,Dir) )
			+ delete( received(Sender, not(fButtonOn(Level,Dir))) )	% delete received messages
			+ delete( served(Level, Dir) )
			+ delete( requestSent(Level, Dir) ).	
		
		% update "Sender's doorState" from Old to New
%		forall bel( received(Sender, not(doorState(Old), doorState(New))) ) 
%				do insert( not(elevDoorState(Sender,Old)), elevDoorState(Sender, New) )
%				+ delete( received(Sender, not(doorState(Old), doorState(New))) ).	% delete received messages //TODO probably don't need
		
		% insert or delte "Sender is going direction Dir" when received from elevators
%		forall bel( received(Sender, dir(Dir)), not(agtDir(Sender, Dir)) )
%			do insert( agtDir(Sender,Dir) )
%			+ delete(received(Sender, dir(Dir))).	% delete received messages
%		forall bel( agtDir(Sender, Dir), received(Sender, not(dir(Dir))) )
%			do delete( agtDir(Sender,Dir) )
%			+ delete( received(Sender, not(dir(Dir))) ). 	% delete received messages //TODO probably don't need
			
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Bids Management
		% send auction
		forall bel( agent(Receiver), not(me(Receiver)), auction(Level, Dir), not(requestSent(Level, Dir)) )
			do (Receiver).sendonce(please_bid(Level,Dir))
			+ insert( requestSent(Level, Dir) ).

		
		%%%%% receive bids

		% accept the first bid for an auction
		forall bel( received(Sender, bid(Level, Dir, Util)), auction(Level, Dir), not(existABid(Level,Dir)) )
			do delete( received(Sender, bid(Level, Dir, Util)) )
			+ insert( bid(Sender, Level, Dir, Util) ).
		
		% accept bid with different utility from the previous one
		forall bel( received(Sender, bid(Level, Dir, Util)), bid(OtherSender, Level, Dir, OtherUtil), Util \= OtherUtil, Sender \= OtherSender )
			do delete( received(Sender, bid(Level, Dir, Util)) )
			+ insert( bid(Sender, Level, Dir, Util) ).
		
		% reject bid with the same utility from the previous one
		forall bel( received(Sender, bid(Level, Dir, Util)), bid(OtherSender, Level, Dir, OtherUtil), Util = OtherUtil )
			do delete( received(Sender, bid(Level, Dir, Util)) ).

			
		
		%%%%% delete redundant bids
		forall bel( highest_bid(Sender, Level, Dir, Util), bid(AnyAgt, Level, Dir, AnyUtil), Util > AnyUtil)
			do  delete( bid(AnyAgt,Level,Dir,AnyUtil)  ).
			
%		% keep only one highest bid if more than one exist based on the proiority of agents (does not work))
%		forall bel( highest_bid(Receiver, Level, Dir, Util), AnyAgt \= Receiver, priorTo(Receiver, AnyAgt), highest_bid(AnyAgt, Level, Dir, Util)  )
%			do delete( bid(AnyAgt, Level, Dir, Util)  )
%			+ delete( highest_bid(AnyAgt, Level, Dir, Util) ).
		
%		% if more than one highest bids exist, delete the redundant ones and keep only one left (does not work)
%		forall bel( bid(AnyAgt, Level, Dir, Util), bid(OtherAgt, Level, Level, Util), OtherAgt \= AnyAgt )
%			do delete( bid(OtherAgt, Level, Level, Util) ).

		% assign task to the agent who bid highest
		forall bel( highest_bid(Receiver, Level, Dir, Util), bid(Receiver, Level, Dir, Util), agent(Receiver), not(me(Receiver)))
			do (Receiver).sendonce( aim(Level, Dir) )
				+ insert( served(Level, Dir) )
				+ delete( highest_bid(Receiver, Level, Dir, Util) )
				+ delete( bid(Receiver, Level, Dir, Util) ).
				
		% //TODO Double check the request from passenger (fButtonOn) is served or not
		% served(Level,Dir), requestSent(Level,Dir)
		

				
		
	}
}